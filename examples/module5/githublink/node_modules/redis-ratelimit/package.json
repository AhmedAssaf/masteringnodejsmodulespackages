{
  "name": "redis-ratelimit",
  "version": "0.0.2",
  "description": "Sliding window rate limiter based on redis sorted sets",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chriskinsman/redis-ratelimit"
  },
  "keywords": [
    "rate",
    "limit",
    "ratelimit",
    "redis",
    "sorted",
    "set"
  ],
  "author": {
    "name": "Chris Kinsman"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chriskinsman/redis-ratelimit/issues"
  },
  "dependencies": {
    "redis": "~0.12.1",
    "async": "~0.9.0",
    "hiredis": "~0.1.17"
  },
  "devDependencies": {
    "mocha": "~2.1.0"
  },
  "gitHead": "29bfbc4d31f72d435e562b31c13fbeabf4a829e7",
  "readme": "\n  Rate limiting / throttling based using Redis\n\n  [![NPM Version][npm-image]][npm-url]\n  [![NPM Downloads][downloads-image]][downloads-url]\n  [![Build Status][travis-image]][travis-url]\n\n```js\nvar ratelimit = require('redis-ratelimit')\nvar async = require('async')\n\nvar count = 0;\nasync.doWhilst(function(done) {\n    ratelimit.check('counter', 10, 2, function(err, limited) {\n        if(limited)\n        {\n            // Don't do anything, wait some amount of time\n            // and check rate limit again\n            setTimeout(done, 1000*5);\n        }\n        else\n        {\n            // Do work\n            count++;\n            done();\n        }\n    })\n}, function() {\n    return count < 10;\n}, function(err) {\n    // Done\n    process.exit(0);\n});\n\n```\n\n## Installation\n\n```bash\n$ npm install redis-ratelimit\n```\n\n## Features\n\n  * Provides a distributed rate limit per key\n  * Redis sorted sets used for high performance\n\n## Documentation\n\n### configure(port, host, options)\n\nOptionally configures the underlying redis instance used by the rate limiter.\n\n__Arguments__\n\n* `port` - Port redis is listening on\n* `host` - Host redis is on\n* `options` - Options hash passed through to underlying redis createClient() call\n\n### check(key, windowInSeconds, limit, callback)\n\nChecks if the specified key over or under the rate limit.  If over rate limit the call to check is not counted\nagainst the rate limit\n\n__Arguments__\n\n* `key` - Unique key the rate limit is associated with\n* `windowInSeconds` - The length of the window during which the calls are rate limited.  This is not a bucket\nbut a sliding window\n* `limit` - Number of calls that are allowed before the rate limit kicks in\n* `callback(err, limited)` - A callback which indicates if the rate limit has kicked in or not.  If an error\noccurred limited will be set to true.  If limited returns true the call to check() does not count against\nthe rate limit.\n\n### count(key, callback)\n\nReturns the number of calls that are currently counting against the rate limit.\n\n__Arguments__\n\n* `key` - Unique key the rate limit is associated with\n* `callback(err, count)` - A callback which returns the count of calls counting against the rate limit.\n\n\n## People\n\nThe author is [Chris Kinsman](https://github.com/chriskinsman)\n\n## License\n\n  [MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/redis-ratelimit.svg?style=flat\n[npm-url]: https://npmjs.org/package/redis-ratelimit\n[downloads-image]: https://img.shields.io/npm/dm/redis-ratelimit.svg?style=flat\n[downloads-url]: https://npmjs.org/package/redis-ratelimit\n[travis-image]: https://img.shields.io/travis/chriskinsman/redis-ratelimit.svg?style=flat\n[travis-url]: https://travis-ci.org/chriskinsman/redis-ratelimit\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/chriskinsman/redis-ratelimit",
  "_id": "redis-ratelimit@0.0.2",
  "_shasum": "eb3005258896048d5ddd4c3f03b70890a91cf04e",
  "_from": "git://github.com/chriskinsman/redis-ratelimit.git",
  "_resolved": "git://github.com/chriskinsman/redis-ratelimit.git#29bfbc4d31f72d435e562b31c13fbeabf4a829e7",
  "_fromGithub": true
}
